[
    {
        "id": 4,
        "slug": "how-to-make-a-simple-counter-with-lit",
        "date": "23 Jul 2023 18:15:00 GMT",
        "title": "How to Make a Simple Counter with Lit",
        "body": "<h3 id=\"import-lit\">Import Lit<\/h3>\r\n<p>Let&#39;s start with importing what we need from the Lit library.<\/p>\r\n<pre><code><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script<\/span> <span class=\"hljs-attr\">type<\/span>=<span class=\"hljs-string\">\"module\"<\/span>&gt;<\/span><span class=\"actionscript\">\r\n    <span class=\"hljs-meta\"><span class=\"hljs-meta-keyword\">import<\/span> <\/span><\/span><\/span><span class=\"hljs-template-variable\">{ LitElement, html, css }<\/span><span class=\"xml\"><span class=\"javascript\"> <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">\"https:\/\/cdn.jsdelivr.net\/gh\/lit\/dist@2\/core\/lit-core.min.js\"<\/span>;\r\n<\/span><span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">script<\/span>&gt;<\/span><\/span>\r\n<\/code><\/pre><h3 id=\"declare-the-class\">Declare the Class<\/h3>\r\n<p>Write some boilerplate to declare your component class.<\/p>\r\n<pre><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Counter<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">LitElement<\/span> <\/span>{\r\n    static properties = {};\r\n\r\n    static styles = css``;\r\n\r\n    constructor() {\r\n        <span class=\"hljs-keyword\">super<\/span>();\r\n    }\r\n\r\n    render() {\r\n        <span class=\"hljs-keyword\">return<\/span> html``;\r\n    }\r\n}\r\n<\/code><\/pre><h3 id=\"define-your-custom-component\">Define Your Custom Component<\/h3>\r\n<p>Define your custom component class in the DOM with a tag of your choice. Web components must have a hyphen in their tag name, so make sure to include one.<\/p>\r\n<pre><code>customElements.<span class=\"hljs-class\"><span class=\"hljs-keyword\">define<\/span><\/span>(<span class=\"hljs-string\">\"counter-component\"<\/span>, Counter);\r\n<\/code><\/pre><h3 id=\"define-your-state\">Define Your State<\/h3>\r\n<p>As with most counters written in other UI frameworks, we need to declare our count as a state variable. Add this key \/ value pair to your properties.<\/p>\r\n<pre><code>...\r\n<span class=\"hljs-keyword\">static<\/span> properties = {\r\n    _count: {<span class=\"hljs-class\"><span class=\"hljs-keyword\">type<\/span>: <span class=\"hljs-title\">Number<\/span>},<\/span>\r\n};\r\n...\r\n<\/code><\/pre><p>The leading underscore means this is a private property, signifying that it isn&#39;t passed from the parent component. It is instead a completely internal property.<\/p>\r\n<p>Now we need to declare the initial value of the count, since we don&#39;t want it to be undefined. This is done in the class constructor.<\/p>\r\n<pre><code>...\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor<\/span><span class=\"hljs-params\">()<\/span> <span class=\"hljs-comment\">{\r\n    super();\r\n    this._count = 0;\r\n}<\/span>\r\n...<\/span>\r\n<\/code><\/pre><h3 id=\"display-the-count\">Display the Count<\/h3>\r\n<p>We add our markup to the render method.<\/p>\r\n<pre><code>render() {\r\n    <span class=\"hljs-keyword\">return<\/span> html<span class=\"hljs-string\">`\r\n        &lt;p&gt;<span class=\"hljs-subst\">${<span class=\"hljs-keyword\">this<\/span>._count}<\/span>&lt;\/p&gt;\r\n    `<\/span>\r\n}\r\n<\/code><\/pre><p>You should see the value of count, 0, displayed on the page.<\/p>\r\n<h3 id=\"add-the-button-markup-with-onclick-event\">Add the Button Markup with Onclick Event<\/h3>\r\n<p>Now we need to add buttons that increment \/ decrement our count. We use the special @ syntax of Lit to bind our event handlers to the buttons.<\/p>\r\n<pre><code>...\r\n&lt;button\r\n    <span class=\"hljs-meta\">@click<\/span>=${() =&gt; <span class=\"hljs-keyword\">this<\/span>._count = <span class=\"hljs-keyword\">this<\/span>._count + <span class=\"hljs-number\">1<\/span>}\r\n&gt;\r\n    +\r\n&lt;\/button&gt;\r\n&lt;button\r\n    <span class=\"hljs-meta\">@click<\/span>=${() =&gt; <span class=\"hljs-keyword\">this<\/span>._count = <span class=\"hljs-keyword\">this<\/span>._count - <span class=\"hljs-number\">1<\/span>}\r\n&gt;\r\n    -\r\n&lt;\/button&gt;\r\n...\r\n<\/code><\/pre><p>With this, clicking on the buttons should increment \/ decrement the number displayed.<\/p>\r\n<h3 id=\"adding-css\">Adding CSS<\/h3>\r\n<p>Finally we add some css to the styles.<\/p>\r\n<pre><code><span class=\"hljs-keyword\">static<\/span> styles = css`\r\n    button {\r\n        <span class=\"hljs-built_in\">background<\/span>: <span class=\"hljs-built_in\">red<\/span>;\r\n        <span class=\"hljs-built_in\">color<\/span>: white;\r\n    }\r\n`\r\n<\/code><\/pre><h3 id=\"using-the-new-component-in-dom\">Using the New Component in DOM<\/h3>\r\n<p>Having defined our new web component, it is now time to use it in our DOM. Simply add the below tag where you&#39;d like to see the component.<\/p>\r\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body<\/span>&gt;<\/span>\r\n...\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">counter-component<\/span>&gt;<\/span><span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">counter-component<\/span>&gt;<\/span>\r\n...\r\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">body<\/span>&gt;<\/span>\r\n<\/code><\/pre><h3 id=\"full-code\">Full Code<\/h3>\r\n<p>Here&#39;s a working example.<\/p>\r\n<pre><code><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html<\/span> <span class=\"hljs-attr\">lang<\/span>=<span class=\"hljs-string\">\"en\"<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head<\/span>&gt;<\/span>\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title<\/span>&gt;<\/span>EO-UK Tutorial | How to Make a Simple Counter with Lit<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">title<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">head<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body<\/span>&gt;<\/span>\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">counter-component<\/span>&gt;<\/span><span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">counter-component<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">body<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script<\/span> <span class=\"hljs-attr\">type<\/span>=<span class=\"hljs-string\">\"module\"<\/span>&gt;<\/span><span class=\"javascript\">\r\n    <span class=\"hljs-keyword\">import<\/span> { LitElement, html, css } <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">\"https:\/\/cdn.jsdelivr.net\/gh\/lit\/dist@2\/core\/lit-core.min.js\"<\/span>;\r\n\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Counter<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">LitElement<\/span> <\/span>{\r\n        <span class=\"hljs-keyword\">static<\/span> properties = {\r\n            <span class=\"hljs-attr\">_count<\/span>: {<span class=\"hljs-attr\">type<\/span>: <span class=\"hljs-built_in\">Number<\/span>},\r\n        };\r\n\r\n        <span class=\"hljs-keyword\">static<\/span> styles = css<span class=\"hljs-string\">`\r\n            button {\r\n                background: red;\r\n                color: white;\r\n            }\r\n        `<\/span>\r\n\r\n        <span class=\"hljs-keyword\">constructor<\/span>() {\r\n            <span class=\"hljs-keyword\">super<\/span>();\r\n            <span class=\"hljs-keyword\">this<\/span>._count = <span class=\"hljs-number\">0<\/span>;\r\n        }\r\n\r\n        render() {\r\n            <span class=\"hljs-keyword\">return<\/span> html<span class=\"hljs-string\">`\r\n                &lt;p&gt;<span class=\"hljs-subst\">${<span class=\"hljs-keyword\">this<\/span>._count}<\/span>&lt;\/p&gt;\r\n                &lt;button\r\n                    @click=<span class=\"hljs-subst\">${() =&gt; <span class=\"hljs-keyword\">this<\/span>._count = <span class=\"hljs-keyword\">this<\/span>._count + <span class=\"hljs-number\">1<\/span>}<\/span>\r\n                &gt;\r\n                    +\r\n                &lt;\/button&gt;\r\n                &lt;button\r\n                    @click=<span class=\"hljs-subst\">${() =&gt; <span class=\"hljs-keyword\">this<\/span>._count = <span class=\"hljs-keyword\">this<\/span>._count - <span class=\"hljs-number\">1<\/span>}<\/span>\r\n                &gt;\r\n                    -\r\n                &lt;\/button&gt;\r\n            `<\/span>\r\n        }\r\n    }\r\n    customElements.define(<span class=\"hljs-string\">\"counter-component\"<\/span>, Counter);\r\n<\/span><span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">script<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">html<\/span>&gt;<\/span>\r\n<\/code><\/pre>",
        "excerpt": "Learn how to make a Lit counter component with buttons for incrementing and decrementing",
        "image": "posts/lit.png"
    },
    {
        "id": 5,
        "slug": "how-to-pass-data-to-lit-components",
        "date": "23 Jul 2023 19:23:00 GMT",
        "title": "How to Pass Data to Lit Components",
        "body": "<h3 id=\"define-the-child-component\">Define the Child Component<\/h3>\r\n<p>Let&#39;s start with defining a GroceryList component that will take a list of grocery items and display them as an unordered list.<\/p>\r\n<p>We add the &quot;items&quot; state to the properties. It has no leading underscore as this is supposed to be a public property passed from the parent.<\/p>\r\n<p>We then use the map method to render the items array. <\/p>\r\n<pre><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">GroceryList<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">LitElement<\/span> <\/span>{\r\n    static properties = {\r\n        items: {<span class=\"hljs-class\"><span class=\"hljs-keyword\">type<\/span><\/span>: <span class=\"hljs-type\">Array<\/span>},\r\n    }\r\n\r\n    constructor() {\r\n        <span class=\"hljs-keyword\">super<\/span>();\r\n    }\r\n\r\n    render() {\r\n        <span class=\"hljs-keyword\">return<\/span> html`\r\n            &lt;ul&gt;\r\n                ${<span class=\"hljs-keyword\">this<\/span>.items.map(item =&gt; html`&lt;li&gt;${item}&lt;\/li&gt;`)}\r\n            &lt;\/ul&gt;\r\n        `\r\n    }\r\n}\r\ncustomElements.define(<span class=\"hljs-string\">\"grocery-list\"<\/span>, <span class=\"hljs-type\">GroceryList<\/span>);\r\n<\/code><\/pre><h3 id=\"define-the-parent\">Define the Parent<\/h3>\r\n<p>We can now define a parent component that will pass the grocery items to the GroceryList component. <\/p>\r\n<p>The way we pass the data is similar to how we define an attribute for regular HTML elements. Except, the attribute name starts with a dot. This allows us to pass a JS array by reference.<\/p>\r\n<p>The dot is optional but the alternative is to pass a string representation of the array and have Lit convert that string to a JS array.<\/p>\r\n<pre><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">App<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">LitElement<\/span> <\/span>{\r\n    constructor() {\r\n        <span class=\"hljs-keyword\">super<\/span>();\r\n    }\r\n\r\n    render() {\r\n        <span class=\"hljs-keyword\">return<\/span> html`\r\n            &lt;grocery-list\r\n                .items=${[\r\n                    <span class=\"hljs-string\">\"apple\"<\/span>,\r\n                    <span class=\"hljs-string\">\"cheese\"<\/span>,\r\n                    <span class=\"hljs-string\">\"milk\"<\/span>,\r\n                ]}\r\n            &gt;&lt;\/grocery-list&gt;\r\n        `\r\n    }\r\n}\r\ncustomElements.define(<span class=\"hljs-string\">\"app-component\"<\/span>, <span class=\"hljs-type\">App<\/span>);\r\n<\/code><\/pre><h3 id=\"full-code\">Full Code<\/h3>\r\n<p>Here&#39;s a working example.<\/p>\r\n<pre><code><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html<\/span> <span class=\"hljs-attr\">lang<\/span>=<span class=\"hljs-string\">\"en\"<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head<\/span>&gt;<\/span>\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title<\/span>&gt;<\/span>EO-UK Tutorial | How to Pass Data to Lit Components<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">title<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">head<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body<\/span>&gt;<\/span>\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">app-component<\/span>&gt;<\/span><span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">app-component<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">body<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script<\/span> <span class=\"hljs-attr\">type<\/span>=<span class=\"hljs-string\">\"module\"<\/span>&gt;<\/span><span class=\"javascript\">\r\n    <span class=\"hljs-keyword\">import<\/span> { LitElement, html, css } <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">\"https:\/\/cdn.jsdelivr.net\/gh\/lit\/dist@2\/core\/lit-core.min.js\"<\/span>;\r\n\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">GroceryList<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">LitElement<\/span> <\/span>{\r\n        <span class=\"hljs-keyword\">static<\/span> properties = {\r\n            <span class=\"hljs-attr\">items<\/span>: {<span class=\"hljs-attr\">type<\/span>: <span class=\"hljs-built_in\">Array<\/span>},\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">constructor<\/span>() {\r\n            <span class=\"hljs-keyword\">super<\/span>();\r\n        }\r\n\r\n        render() {\r\n            <span class=\"hljs-keyword\">return<\/span> html<span class=\"hljs-string\">`\r\n                &lt;ul&gt;\r\n                    <span class=\"hljs-subst\">${<span class=\"hljs-keyword\">this<\/span>.items.map(item =&gt; html<span class=\"hljs-string\">`&lt;li&gt;<span class=\"hljs-subst\">${item}<\/span>&lt;\/li&gt;`<\/span>)}<\/span>\r\n                &lt;\/ul&gt;\r\n            `<\/span>\r\n        }\r\n    }\r\n    customElements.define(<span class=\"hljs-string\">\"grocery-list\"<\/span>, GroceryList);\r\n\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">App<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">LitElement<\/span> <\/span>{\r\n        <span class=\"hljs-keyword\">constructor<\/span>() {\r\n            <span class=\"hljs-keyword\">super<\/span>();\r\n        }\r\n\r\n        render() {\r\n            <span class=\"hljs-keyword\">return<\/span> html<span class=\"hljs-string\">`\r\n                &lt;grocery-list\r\n                    .items=<span class=\"hljs-subst\">${[\r\n                        <span class=\"hljs-string\">\"apple\"<\/span>,\r\n                        <span class=\"hljs-string\">\"cheese\"<\/span>,\r\n                        <span class=\"hljs-string\">\"milk\"<\/span>,\r\n                    ]}<\/span>\r\n                &gt;&lt;\/grocery-list&gt;\r\n            `<\/span>\r\n        }\r\n    }\r\n    customElements.define(<span class=\"hljs-string\">\"app-component\"<\/span>, App);\r\n<\/span><span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">script<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">html<\/span>&gt;<\/span>\r\n<\/code><\/pre>",
        "excerpt": "Learn how to pass data from a parent component to a child component in Lit",
        "image": "posts/lit.png"
    },
    {
        "id": 6,
        "slug": "component-composition-in-lit-components",
        "date": "23 Jul 2023 20:01:00 GMT",
        "title": "Component Composition in Lit Components",
        "body": "<h3 id=\"define-the-child-component\">Define the Child Component<\/h3>\r\n<p>We&#39;ll create a navbar using Lit&#39;s component composition.<\/p>\r\n<p>To begin with, let&#39;s define a NavigationItem component that will render links to the different pages of our site.<\/p>\r\n<pre><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">NavigationItem<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">LitElement<\/span> <\/span>{\r\n    static properties = {\r\n        url: {<span class=\"hljs-class\"><span class=\"hljs-keyword\">type<\/span><\/span>: <span class=\"hljs-type\">String<\/span>},\r\n        text: {<span class=\"hljs-class\"><span class=\"hljs-keyword\">type<\/span><\/span>: <span class=\"hljs-type\">String<\/span>},\r\n    }\r\n\r\n    static styles = css`\r\n        li {\r\n            padding: <span class=\"hljs-number\">1<\/span>em;\r\n        }\r\n    `\r\n\r\n    constructor() {\r\n        <span class=\"hljs-keyword\">super<\/span>();\r\n    }\r\n\r\n    render() {\r\n        <span class=\"hljs-keyword\">return<\/span> html`\r\n            &lt;li&gt;\r\n                &lt;a href=${<span class=\"hljs-keyword\">this<\/span>.url}&gt;${<span class=\"hljs-keyword\">this<\/span>.text}&lt;\/a&gt;\r\n            &lt;\/li&gt;\r\n        `\r\n    }\r\n}\r\ncustomElements.define(<span class=\"hljs-string\">\"navigation-item\"<\/span>, <span class=\"hljs-type\">NavigationItem<\/span>);\r\n<\/code><\/pre><h3 id=\"define-the-parent-component\">Define the Parent Component<\/h3>\r\n<p>Now we define the NavigationBar component that will hold the all the NavigationItem components we need.<\/p>\r\n<p>Notice the &quot;slot&quot; tag in the rendered markup. That&#39;s where the children will be rendered.<\/p>\r\n<pre><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">NavigationBar<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">LitElement<\/span> <\/span>{\r\n    static styles = css`\r\n        nav ul {\r\n            display: flex;\r\n            place-content: center;\r\n            padding: <span class=\"hljs-number\">0<\/span>;\r\n            list-style: none;\r\n        }\r\n    `\r\n\r\n    constructor() {\r\n        <span class=\"hljs-keyword\">super<\/span>();\r\n    }\r\n\r\n    render() {\r\n        <span class=\"hljs-keyword\">return<\/span> html`\r\n            &lt;nav&gt;\r\n                &lt;ul&gt;\r\n                    &lt;slot&gt;&lt;\/slot&gt;\r\n                &lt;\/ul&gt;\r\n            &lt;\/nav&gt;\r\n        `\r\n    }\r\n}\r\ncustomElements.define(<span class=\"hljs-string\">\"navigation-bar\"<\/span>, <span class=\"hljs-type\">NavigationBar<\/span>);\r\n<\/code><\/pre><h3 id=\"putting-them-together\">Putting Them Together<\/h3>\r\n<p>Finally, we can define our App component where we put these 2 components together.<\/p>\r\n<pre><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">App<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">LitElement<\/span> <\/span>{\r\n    constructor() {\r\n        <span class=\"hljs-keyword\">super<\/span>();\r\n    }\r\n\r\n    render() {\r\n        <span class=\"hljs-keyword\">return<\/span> html`\r\n            &lt;navigation-bar&gt;\r\n                &lt;navigation-item url=<span class=\"hljs-string\">\"\/\"<\/span> text=<span class=\"hljs-string\">\"Home\"<\/span>&gt;&lt;\/navigation-item&gt;\r\n                &lt;navigation-item url=<span class=\"hljs-string\">\"\/about\"<\/span> text=<span class=\"hljs-string\">\"About\"<\/span>&gt;&lt;\/navigation-item&gt;\r\n                &lt;navigation-item url=<span class=\"hljs-string\">\"\/contact\"<\/span> text=<span class=\"hljs-string\">\"Contact\"<\/span>&gt;&lt;\/navigation-item&gt;\r\n            &lt;\/navigation-bar&gt;\r\n        `\r\n    }\r\n}\r\ncustomElements.define(<span class=\"hljs-string\">\"app-component\"<\/span>, <span class=\"hljs-type\">App<\/span>);\r\n<\/code><\/pre><h3 id=\"why-use-composition-\">Why Use Composition?<\/h3>\r\n<p>Prop drilling is when you pass properties to a child component just so that component can pass it to its own children. The middle component has no actual use for the properties passed, it&#39;s just handing them over to the ones that actually need them.<\/p>\r\n<p>As you can see in the above example, we did no prop drilling. Without composition, we would have to pass the url and text of each NavigationItem to the NavigationBar first. Composition let us cut out the middleman.<\/p>\r\n<h3 id=\"full-code\">Full Code<\/h3>\r\n<p>Here&#39;s a working example.<\/p>\r\n<pre><code><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html<\/span> <span class=\"hljs-attr\">lang<\/span>=<span class=\"hljs-string\">\"en\"<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head<\/span>&gt;<\/span>\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title<\/span>&gt;<\/span>EO-UK Tutorial | Component Composition in Lit Components<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">title<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">head<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body<\/span>&gt;<\/span>\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">app-component<\/span>&gt;<\/span><span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">app-component<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">body<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script<\/span> <span class=\"hljs-attr\">type<\/span>=<span class=\"hljs-string\">\"module\"<\/span>&gt;<\/span><span class=\"javascript\">\r\n    <span class=\"hljs-keyword\">import<\/span> { LitElement, html, css } <span class=\"hljs-keyword\">from<\/span> <span class=\"hljs-string\">\"https:\/\/cdn.jsdelivr.net\/gh\/lit\/dist@2\/core\/lit-core.min.js\"<\/span>;\r\n\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">NavigationItem<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">LitElement<\/span> <\/span>{\r\n        <span class=\"hljs-keyword\">static<\/span> properties = {\r\n            <span class=\"hljs-attr\">url<\/span>: {<span class=\"hljs-attr\">type<\/span>: <span class=\"hljs-built_in\">String<\/span>},\r\n            <span class=\"hljs-attr\">text<\/span>: {<span class=\"hljs-attr\">type<\/span>: <span class=\"hljs-built_in\">String<\/span>},\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">static<\/span> styles = css<span class=\"hljs-string\">`\r\n            li {\r\n                padding: 1em;\r\n            }\r\n        `<\/span>\r\n\r\n        <span class=\"hljs-keyword\">constructor<\/span>() {\r\n            <span class=\"hljs-keyword\">super<\/span>();\r\n        }\r\n\r\n        render() {\r\n            <span class=\"hljs-keyword\">return<\/span> html<span class=\"hljs-string\">`\r\n                &lt;li&gt;\r\n                    &lt;a href=<span class=\"hljs-subst\">${<span class=\"hljs-keyword\">this<\/span>.url}<\/span>&gt;<span class=\"hljs-subst\">${<span class=\"hljs-keyword\">this<\/span>.text}<\/span>&lt;\/a&gt;\r\n                &lt;\/li&gt;\r\n            `<\/span>\r\n        }\r\n    }\r\n    customElements.define(<span class=\"hljs-string\">\"navigation-item\"<\/span>, NavigationItem);\r\n\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">NavigationBar<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">LitElement<\/span> <\/span>{\r\n        <span class=\"hljs-keyword\">static<\/span> styles = css<span class=\"hljs-string\">`\r\n            nav ul {\r\n                display: flex;\r\n                place-content: center;\r\n                padding: 0;\r\n                list-style: none;\r\n            }\r\n        `<\/span>\r\n\r\n        <span class=\"hljs-keyword\">constructor<\/span>() {\r\n            <span class=\"hljs-keyword\">super<\/span>();\r\n        }\r\n\r\n        render() {\r\n            <span class=\"hljs-keyword\">return<\/span> html<span class=\"hljs-string\">`\r\n                &lt;nav&gt;\r\n                    &lt;ul&gt;\r\n                        &lt;slot&gt;&lt;\/slot&gt;\r\n                    &lt;\/ul&gt;\r\n                &lt;\/nav&gt;\r\n            `<\/span>\r\n        }\r\n    }\r\n    customElements.define(<span class=\"hljs-string\">\"navigation-bar\"<\/span>, NavigationBar);\r\n\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">App<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">LitElement<\/span> <\/span>{\r\n        <span class=\"hljs-keyword\">constructor<\/span>() {\r\n            <span class=\"hljs-keyword\">super<\/span>();\r\n        }\r\n\r\n        render() {\r\n            <span class=\"hljs-keyword\">return<\/span> html<span class=\"hljs-string\">`\r\n                &lt;navigation-bar&gt;\r\n                    &lt;navigation-item url=\"\/\" text=\"Home\"&gt;&lt;\/navigation-item&gt;\r\n                    &lt;navigation-item url=\"\/about\" text=\"About\"&gt;&lt;\/navigation-item&gt;\r\n                    &lt;navigation-item url=\"\/contact\" text=\"Contact\"&gt;&lt;\/navigation-item&gt;\r\n                &lt;\/navigation-bar&gt;\r\n            `<\/span>\r\n        }\r\n    }\r\n    customElements.define(<span class=\"hljs-string\">\"app-component\"<\/span>, App);\r\n<\/span><span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">script<\/span>&gt;<\/span>\r\n<span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">html<\/span>&gt;<\/span>\r\n<\/code><\/pre>",
        "excerpt": "Learn how to use component composition with Lit components using the \"slot\" tag",
        "image": "posts/lit.png"
    },
    {
        "id": 7,
        "slug": "using-named-slots-in-lit-components",
        "date": "23 Jul 2023 20:41:00 GMT",
        "title": "Using Named Slots in Lit Components",
        "body": "<h3 id=\"define-the-child-component\">Define the Child Component<\/h3>\r\n<p>With Lit, you have the option to name the children you pass into a parent component and render them in separate places in the parent&#39;s markup.<\/p>\r\n<p>Let&#39;s define two child components, Sidebar and Main, that we&#39;ll eventually pass into a Page component.<\/p>\r\n<pre><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Sidebar<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">LitElement<\/span> <\/span>{    \r\n    static styles = css`\r\n        p {\r\n            background: orange;\r\n        }\r\n    `\r\n\r\n    constructor() {\r\n        <span class=\"hljs-keyword\">super<\/span>();\r\n    }\r\n\r\n    render() {\r\n        <span class=\"hljs-keyword\">return<\/span> html`\r\n            &lt;p&gt;<span class=\"hljs-type\">Sidebar<\/span> <span class=\"hljs-type\">Content<\/span>&lt;\/p&gt;\r\n        `\r\n    }\r\n}\r\ncustomElements.define(<span class=\"hljs-string\">\"sidebar-component\"<\/span>, <span class=\"hljs-type\">Sidebar<\/span>);\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Main<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">LitElement<\/span> <\/span>{    \r\n    static styles = css`\r\n        p {\r\n            background: blue;\r\n        }\r\n    `\r\n\r\n    constructor() {\r\n        <span class=\"hljs-keyword\">super<\/span>();\r\n    }\r\n\r\n    render() {\r\n        <span class=\"hljs-keyword\">return<\/span> html`\r\n            &lt;p&gt;<span class=\"hljs-type\">Main<\/span> <span class=\"hljs-type\">Content<\/span>&lt;\/p&gt;\r\n        `\r\n    }\r\n}\r\ncustomElements.define(<span class=\"hljs-string\">\"main-component\"<\/span>, <span class=\"hljs-type\">Main<\/span>);\r\n<\/code><\/pre><h3 id=\"define-the-parent-component\">Define the Parent Component<\/h3>\r\n<p>Now to define the Page component that&#39;ll render the previous two.<\/p>\r\n<p>Notice the name attribute we give to each slot. That&#39;s how the component will tell its children apart. <\/p>\r\n<p>We&#39;re using CSS grid display to allocate the sidebar only a quarter of the space available .<\/p>\r\n<pre><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Page<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">LitElement<\/span> {    <\/span>\r\n        static styles = css`<span class=\"javascript\">\r\n            .page {\r\n                <span class=\"hljs-attr\">display<\/span>: grid;\r\n                grid-template-areas: <span class=\"hljs-string\">'sidebar main main main'<\/span>;\r\n            }\r\n            aside {\r\n                grid-area: sidebar;\r\n            }\r\n            main {\r\n                grid-area: main;\r\n            }\r\n        <\/span>`\r\n\r\n        constructor() {\r\n            <span class=\"hljs-keyword\">super<\/span>();\r\n        }\r\n\r\n        render() {\r\n            <span class=\"hljs-keyword\">return<\/span> html`<span class=\"javascript\">\r\n                &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span><\/span>=<span class=\"hljs-string\">\"page\"<\/span>&gt;\r\n                    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aside<\/span>&gt;<\/span>\r\n                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot<\/span> <span class=\"hljs-attr\">name<\/span>=<span class=\"hljs-string\">\"sidebar\"<\/span>&gt;<\/span><span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">slot<\/span>&gt;<\/span>\r\n                    <span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">aside<\/span>&gt;<\/span><\/span>\r\n                    &lt;main&gt;\r\n                        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot<\/span> <span class=\"hljs-attr\">name<\/span>=<span class=\"hljs-string\">\"main\"<\/span>&gt;<\/span><span class=\"hljs-tag\">&lt;\/<span class=\"hljs-name\">slot<\/span>&gt;<\/span><\/span>\r\n                    &lt;<span class=\"hljs-regexp\">\/main&gt;\r\n                &lt;\/<\/span>div&gt;\r\n            <\/span>`\r\n        }\r\n    }\r\n    customElements.define(<span class=\"hljs-string\">\"page-component\"<\/span>, Page);\r\n<\/code><\/pre><h3 id=\"putting-them-together\">Putting Them Together<\/h3>\r\n<p>All we need to do now is to define our App component that&#39;ll pass Sidebar and Main to the Page component.<\/p>\r\n<p>What&#39;s different here is that we&#39;re adding the &quot;slot&quot; attribute for each child. These slot names correspond to the markup in the Page component&#39;s render method.<\/p>\r\n<pre><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">App<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">LitElement<\/span> <\/span>{\r\n    constructor() {\r\n        <span class=\"hljs-keyword\">super<\/span>();\r\n    }\r\n\r\n    render() {\r\n        <span class=\"hljs-keyword\">return<\/span> html`\r\n            &lt;page-component&gt;\r\n                &lt;sidebar-component slot=<span class=\"hljs-string\">\"sidebar\"<\/span>&gt;&lt;\/sidebar-component&gt;\r\n                &lt;main-component slot=<span class=\"hljs-string\">\"main\"<\/span>&gt;&lt;\/main-component&gt;\r\n            &lt;\/page-component&gt;\r\n        `\r\n    }\r\n}\r\ncustomElements.define(<span class=\"hljs-string\">\"app-component\"<\/span>, <span class=\"hljs-type\">App<\/span>);\r\n<\/code><\/pre><h3 id=\"full-code\">Full Code<\/h3>\r\n<p>Here&#39;s a working example.<\/p>\r\n<pre><code>&lt;!<span class=\"hljs-type\">DOCTYPE<\/span> html&gt;\r\n&lt;html lang=<span class=\"hljs-string\">\"en\"<\/span>&gt;\r\n&lt;head&gt;\r\n    &lt;title&gt;<span class=\"hljs-type\">EO<\/span>-<span class=\"hljs-type\">UK<\/span> <span class=\"hljs-type\">Tutorial<\/span> | <span class=\"hljs-type\">Using<\/span> <span class=\"hljs-type\">Named<\/span> <span class=\"hljs-type\">Slots<\/span> in <span class=\"hljs-type\">Lit<\/span> <span class=\"hljs-type\">Components<\/span>&lt;\/title&gt;\r\n&lt;\/head&gt;\r\n&lt;body&gt;\r\n    &lt;app-component&gt;&lt;\/app-component&gt;\r\n&lt;\/body&gt;\r\n&lt;script <span class=\"hljs-class\"><span class=\"hljs-keyword\">type<\/span><\/span>=<span class=\"hljs-string\">\"module\"<\/span>&gt;\r\n    <span class=\"hljs-keyword\">import<\/span> { <span class=\"hljs-type\">LitElement<\/span>, html, css } from <span class=\"hljs-string\">\"https:\/\/cdn.jsdelivr.net\/gh\/lit\/dist@2\/core\/lit-core.min.js\"<\/span>;\r\n\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Sidebar<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">LitElement<\/span> <\/span>{    \r\n        static styles = css`\r\n            p {\r\n                background: orange;\r\n            }\r\n        `\r\n\r\n        constructor() {\r\n            <span class=\"hljs-keyword\">super<\/span>();\r\n        }\r\n\r\n        render() {\r\n            <span class=\"hljs-keyword\">return<\/span> html`\r\n                &lt;p&gt;<span class=\"hljs-type\">Sidebar<\/span> <span class=\"hljs-type\">Content<\/span>&lt;\/p&gt;\r\n            `\r\n        }\r\n    }\r\n    customElements.define(<span class=\"hljs-string\">\"sidebar-component\"<\/span>, <span class=\"hljs-type\">Sidebar<\/span>);\r\n\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Main<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">LitElement<\/span> <\/span>{    \r\n        static styles = css`\r\n            p {\r\n                background: lightblue;\r\n            }\r\n        `\r\n\r\n        constructor() {\r\n            <span class=\"hljs-keyword\">super<\/span>();\r\n        }\r\n\r\n        render() {\r\n            <span class=\"hljs-keyword\">return<\/span> html`\r\n                &lt;p&gt;<span class=\"hljs-type\">Main<\/span> <span class=\"hljs-type\">Content<\/span>&lt;\/p&gt;\r\n            `\r\n        }\r\n    }\r\n    customElements.define(<span class=\"hljs-string\">\"main-component\"<\/span>, <span class=\"hljs-type\">Main<\/span>);\r\n\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Page<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">LitElement<\/span> <\/span>{    \r\n        static styles = css`\r\n            .page {\r\n                display: grid;\r\n                grid-template-areas: <span class=\"hljs-symbol\">'sidebar<\/span> main main main';\r\n            }\r\n            aside {\r\n                grid-area: sidebar;\r\n            }\r\n            main {\r\n                grid-area: main;\r\n            }\r\n        `\r\n\r\n        constructor() {\r\n            <span class=\"hljs-keyword\">super<\/span>();\r\n        }\r\n\r\n        render() {\r\n            <span class=\"hljs-keyword\">return<\/span> html`\r\n                &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span><\/span>=<span class=\"hljs-string\">\"page\"<\/span>&gt;\r\n                    &lt;aside&gt;\r\n                        &lt;slot name=<span class=\"hljs-string\">\"sidebar\"<\/span>&gt;&lt;\/slot&gt;\r\n                    &lt;\/aside&gt;\r\n                    &lt;main&gt;\r\n                        &lt;slot name=<span class=\"hljs-string\">\"main\"<\/span>&gt;&lt;\/slot&gt;\r\n                    &lt;\/main&gt;\r\n                &lt;\/div&gt;\r\n            `\r\n        }\r\n    }\r\n    customElements.define(<span class=\"hljs-string\">\"page-component\"<\/span>, <span class=\"hljs-type\">Page<\/span>);\r\n\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">App<\/span> <span class=\"hljs-keyword\">extends<\/span> <span class=\"hljs-title\">LitElement<\/span> <\/span>{\r\n        constructor() {\r\n            <span class=\"hljs-keyword\">super<\/span>();\r\n        }\r\n\r\n        render() {\r\n            <span class=\"hljs-keyword\">return<\/span> html`\r\n                &lt;page-component&gt;\r\n                    &lt;sidebar-component slot=<span class=\"hljs-string\">\"sidebar\"<\/span>&gt;&lt;\/sidebar-component&gt;\r\n                    &lt;main-component slot=<span class=\"hljs-string\">\"main\"<\/span>&gt;&lt;\/main-component&gt;\r\n                &lt;\/page-component&gt;\r\n            `\r\n        }\r\n    }\r\n    customElements.define(<span class=\"hljs-string\">\"app-component\"<\/span>, <span class=\"hljs-type\">App<\/span>);\r\n&lt;\/script&gt;\r\n&lt;\/html&gt;\r\n<\/code><\/pre>",
        "excerpt": "Learn how to use named slots for component composition with Lit components",
        "image": "posts/lit.png"
    }
]